{"version":3,"file":"component---src-templates-tags-tsx-43f8eb813b9d9244ecba.js","mappings":"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","sources":["webpack://parafiaskuly/./src/templates/tags.tsx"],"sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { getSrc } from 'gatsby-plugin-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport type { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ntype TagTemplateProps = {\n  location: Location;\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          yamlId: string;\n          description: string;\n          image?: any;\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n};\n\nfunction Tags({ pageContext, data, location }: TagTemplateProps) {\n  const tag = pageContext.tag ? pageContext.tag : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagData = data.allTagYaml.edges.find(\n    n => n.node.yamlId.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta name=\"robots\" content=\"index, follow\" />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        <meta property=\"og:locale\" content={config.locale} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header className=\"site-archive-header\" css={[SiteHeader, SiteArchiveHeader]}>\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={getSrc(tagData?.node?.image)}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    Kolekcja {totalCount > 1 && `${totalCount} postów`}\n                    {totalCount === 1 && 'z 1 postem'}\n                    {totalCount === 0 && 'Brak postów'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query ($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          yamlId\n          description\n          image {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH)\n              }\n            }\n            author {\n              name\n              bio\n              avatar {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n                }\n              }\n            }\n          }\n          fields {\n            readingTime {\n              minutes\n            }\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["pageContext","data","location","_tagData$node","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","yamlId","toLowerCase","___EmotionJSX","IndexLayout","Helmet","lang","config","name","content","description","property","pathname","Wrapper","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","SiteNav","isHome","ResponsiveHeaderBackground","SiteHeaderBackground","backgroundImage","getSrc","image","SiteHeaderContent","SiteTitle","SiteDescription","React","id","SiteMain","PostFeed","map","PostCard","key","fields","slug","post","Footer"],"sourceRoot":""}